// <auto-generated />
using System;
using LeaveManagement.Data.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LeaveManagement.Data.Migrations
{
    [DbContext(typeof(LeaveContext))]
    [Migration("20231117054435_m2")]
    partial class m2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LeaveManagement.Data.Models.Approval", b =>
                {
                    b.Property<int>("ApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApprovalId"), 1L, 1);

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("LeaveRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApprovalId");

                    b.HasIndex("LeaveRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Approvals");
                });

            modelBuilder.Entity("LeaveManagement.Data.Models.LeaveRequest", b =>
                {
                    b.Property<int>("LeaveRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveRequestId"), 1L, 1);

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveStatus")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LeaveRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("LeaveManagement.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "20811416-1ccb-440d-b2d7-cccfb739ac13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eca870cd-3635-43ec-a870-8531cecc7b9c",
                            Email = "employee@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Arun",
                            NormalizedEmail = "EMPLOYEE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBheXP0G3NWbecFXFFZXqB/jzuSS7Tet7Es+lcO2ItlyLitGf53/hWbTtZW59VsTSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91fd5600-ec6b-4296-bd3d-daf09256322c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "5dbe310f-eb29-4ae2-adc3-8fe3376110ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "402c0c85-9701-4615-a54f-c505b48247a3",
                            Email = "teamlead@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Aditya",
                            NormalizedEmail = "TEAMLEAD@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDmZqG6gZbhA42NF4PNiehHuAkB58hLLZAtY07mmrT2sBpnIM8q1M5PCP6fCh7jP1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1647a796-d6be-4dca-a294-e503b5e4511a",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "f7a70c7f-6bad-4fb2-9a6c-2d5253b21008",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "134fbed8-48a2-4c8d-be47-9f3b8cbc7476",
                            Email = "manager@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Udit",
                            NormalizedEmail = "MANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFHAX6krIBu3ZnKWE0UeBZSfYZFCUnZJiqo01jAKfs/yPqSF/njuqu+K5UEqEgqJeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cfec5436-31ea-4b58-bf81-3a40d3f1af92",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "fd04ef2d-de41-4e5a-979f-fc4c1f241dfa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12a59f9f-7a53-4151-bb25-d219caef172d",
                            Email = "astmanager@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Kiran",
                            NormalizedEmail = "ASTMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEbZwvfMjC6px0wUJ5kllCiUhf/lYh1fXHTkbTzlwVsplUytYXHXncfQsRDXqPr6tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc7d9551-76b1-4588-93bc-eb4202f04c1b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "6d2e1388-75c0-4163-b8fa-d9137e68d100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49c40c53-f6de-4b4a-bbae-917e43d16d92",
                            Email = "genmanager@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Ajay",
                            NormalizedEmail = "GENMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENAQ7qXUGa/jm7RT6ZGLu9N3Z4v/1XylUpesj98hy/wgwJ8msaVvy0QOmUa1qqf5ZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a1f07a8-5db8-4952-a536-5d74e2326812",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "95b2be27-f576-4c78-a817-ffecb7144c47",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f10c55a-20ad-4bf5-a04d-b07d5d197acd",
                            Email = "hr77@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Rishi",
                            NormalizedEmail = "HR77@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOMpdqF7aOreA1KLxeHmZs5AUCFMgSlZLg/UdoUoYEZW04wY/rMKzkxILiFz51sqyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98ca1126-1904-481c-abf5-5817f7ee08bc",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "20811416-1ccb-440d-b2d7-cccfb739ac13",
                            RoleId = "7eb86ba1-eafa-49db-b58b-87e2da0ea429"
                        },
                        new
                        {
                            UserId = "5dbe310f-eb29-4ae2-adc3-8fe3376110ce",
                            RoleId = "c5a1999e-a895-4b43-a22c-3c26e8e4e97d"
                        },
                        new
                        {
                            UserId = "f7a70c7f-6bad-4fb2-9a6c-2d5253b21008",
                            RoleId = "8442a53b-a77a-4bd9-b3c9-33b5e570f375"
                        },
                        new
                        {
                            UserId = "fd04ef2d-de41-4e5a-979f-fc4c1f241dfa",
                            RoleId = "18dd2c16-7c16-47f3-ac8f-0ea9a1cc4160"
                        },
                        new
                        {
                            UserId = "6d2e1388-75c0-4163-b8fa-d9137e68d100",
                            RoleId = "a5877ffc-ff2f-4a2e-af53-7144c89b3ae7"
                        },
                        new
                        {
                            UserId = "95b2be27-f576-4c78-a817-ffecb7144c47",
                            RoleId = "e01d34fc-74e2-4298-9367-36ccc116efc6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LeaveManagement.Data.Models.RoleConfig", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("RoleConfig");

                    b.HasData(
                        new
                        {
                            Id = "7eb86ba1-eafa-49db-b58b-87e2da0ea429",
                            ConcurrencyStamp = "0c505844-802d-4330-bfab-f671ba78164e",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE",
                            Priority = 1
                        },
                        new
                        {
                            Id = "c5a1999e-a895-4b43-a22c-3c26e8e4e97d",
                            ConcurrencyStamp = "36f89311-a218-426b-820e-f467fce50f67",
                            Name = "Team Lead",
                            NormalizedName = "TEAM LEAD",
                            Priority = 2
                        },
                        new
                        {
                            Id = "8442a53b-a77a-4bd9-b3c9-33b5e570f375",
                            ConcurrencyStamp = "58317d15-fdba-4a53-b204-79d472ce4560",
                            Name = "Manager",
                            NormalizedName = "MANAGER",
                            Priority = 3
                        },
                        new
                        {
                            Id = "18dd2c16-7c16-47f3-ac8f-0ea9a1cc4160",
                            ConcurrencyStamp = "1463659f-f428-4e7c-a8b9-efade789c5c5",
                            Name = "Assistant Manager",
                            NormalizedName = "ASSISTANT MANAGER",
                            Priority = 4
                        },
                        new
                        {
                            Id = "a5877ffc-ff2f-4a2e-af53-7144c89b3ae7",
                            ConcurrencyStamp = "79b5ccbc-dfc8-4d15-91a6-76b664026c8d",
                            Name = "Generl Manager",
                            NormalizedName = "GENERAL MANAGER",
                            Priority = 5
                        },
                        new
                        {
                            Id = "e01d34fc-74e2-4298-9367-36ccc116efc6",
                            ConcurrencyStamp = "6f739ab7-ae63-4985-9c95-0f1eef7aa884",
                            Name = "HR",
                            NormalizedName = "HR",
                            Priority = 6
                        });
                });

            modelBuilder.Entity("LeaveManagement.Data.Models.Approval", b =>
                {
                    b.HasOne("LeaveManagement.Data.Models.LeaveRequest", "LeaveRequest")
                        .WithMany()
                        .HasForeignKey("LeaveRequestId");

                    b.HasOne("LeaveManagement.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("LeaveRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LeaveManagement.Data.Models.LeaveRequest", b =>
                {
                    b.HasOne("LeaveManagement.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LeaveManagement.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LeaveManagement.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeaveManagement.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LeaveManagement.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
